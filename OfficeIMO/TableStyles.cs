using System;
using System.Collections.Generic;
using System.Text;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Wordprocessing;

namespace OfficeIMO {
    public enum WordTableStyle {
        // Plain Tables
        TableNormal,
        TableGrid,
        PlainTable1,
        PlainTable2,
        PlainTable3,
        PlainTable4,
        PlainTable5,

        // Grid Tables - Line 1
        GridTable1Light,
        GridTable1LightAccent1,
        GridTable1LightAccent2,
        GridTable1LightAccent3,
        GridTable1LightAccent4,
        GridTable1LightAccent5,
        GridTable1LightAccent6,

        // Grid Tables - Line 2
        GridTable2,
        GridTable2Accent1,
        GridTable2Accent2,
        GridTable2Accent3,
        GridTable2Accent4,
        GridTable2Accent5,
        GridTable2Accent6,

        // Grid Tables - Line 3
        GridTable3,
        GridTable3Accent1,
        GridTable3Accent2,
        GridTable3Accent3,
        GridTable3Accent4,
        GridTable3Accent5,
        GridTable3Accent6,

        // Grid Tables - Line 4
        GridTable4,
        GridTable4Accent1,
        GridTable4Accent2,
        GridTable4Accent3,
        GridTable4Accent4,
        GridTable4Accent5,
        GridTable4Accent6,

        // Grid Tables - Line 5
        GridTable5Dark,
        GridTable5DarkAccent1,
        GridTable5DarkAccent2,
        GridTable5DarkAccent3,
        GridTable5DarkAccent4,
        GridTable5DarkAccent5,
        GridTable5DarkAccent6,

        // Grid Tables - Line 6
        GridTable6Colorful,
        GridTable6ColorfulAccent1,
        GridTable6ColorfulAccent2,
        GridTable6ColorfulAccent3,
        GridTable6ColorfulAccent4,
        GridTable6ColorfulAccent5,
        GridTable6ColorfulAccent6,

        // Grid Tables - Line 7
        GridTable7Colorful,
        GridTable7ColorfulAccent1,
        GridTable7ColorfulAccent2,
        GridTable7ColorfulAccent3,
        GridTable7ColorfulAccent4,
        GridTable7ColorfulAccent5,
        GridTable7ColorfulAccent6,

        // List Tables - Line 8
        ListTable1Light,
        ListTable1LightAccent1,
        ListTable1LightAccent2,
        ListTable1LightAccent3,
        ListTable1LightAccent4,
        ListTable1LightAccent5,
        ListTable1LightAccent6,

        // List Tables - Line 9
        ListTable2,
        ListTable2Accent1,
        ListTable2Accent2,
        ListTable2Accent3,
        ListTable2Accent4,
        ListTable2Accent5,
        ListTable2Accent6,

        // List Tables - Line 10
        ListTable3,
        ListTable3Accent1,
        ListTable3Accent2,
        ListTable3Accent3,
        ListTable3Accent4,
        ListTable3Accent5,
        ListTable3Accent6,

        // List Tables - Line 11
        ListTable4,
        ListTable4Accent1,
        ListTable4Accent2,
        ListTable4Accent3,
        ListTable4Accent4,
        ListTable4Accent5,
        ListTable4Accent6,

        // List Tables - Line 12
        ListTable5Dark,
        ListTable5DarkAccent1,
        ListTable5DarkAccent2,
        ListTable5DarkAccent3,
        ListTable5DarkAccent4,
        ListTable5DarkAccent5,
        ListTable5DarkAccent6,

        // List Tables - Line 13
        ListTable6Colorful,
        ListTable6ColorfulAccent1,
        ListTable6ColorfulAccent2,
        ListTable6ColorfulAccent3,
        ListTable6ColorfulAccent4,
        ListTable6ColorfulAccent5,
        ListTable6ColorfulAccent6,

        // List Tables - Line 14
        ListTable7Colorful,
        ListTable7ColorfulAccent1,
        ListTable7ColorfulAccent2,
        ListTable7ColorfulAccent3,
        ListTable7ColorfulAccent4,
        ListTable7ColorfulAccent5,
        ListTable7ColorfulAccent6,
    };

    public static class WordTableStyles {
        public static WordTableStyle GetStyle(string style) {
            switch (style) {
                // Grid Tables - Line 1
                case "TableNormal": return WordTableStyle.TableNormal;
                case "TableGrid": return WordTableStyle.TableGrid;
                case "PlainTable1": return WordTableStyle.PlainTable1;
                case "PlainTable2": return WordTableStyle.PlainTable2;
                case "PlainTable3": return WordTableStyle.PlainTable3;
                case "PlainTable4": return WordTableStyle.PlainTable4;
                case "PlainTable5": return WordTableStyle.PlainTable5;
                // Grid Tables - Line 1
                case "GridTable1Light": return WordTableStyle.GridTable1Light;
                case "GridTable1Light-Accent1": return WordTableStyle.GridTable1LightAccent1;
                case "GridTable1Light-Accent2": return WordTableStyle.GridTable1LightAccent2;
                case "GridTable1Light-Accent3": return WordTableStyle.GridTable1LightAccent3;
                case "GridTable1Light-Accent4": return WordTableStyle.GridTable1LightAccent4;
                case "GridTable1Light-Accent5": return WordTableStyle.GridTable1LightAccent5;
                case "GridTable1Light-Accent6": return WordTableStyle.GridTable1LightAccent6;
                //// Grid Tables - Line 2
                case "GridTable2": return WordTableStyle.GridTable2;
                case "GridTable2-Accent1": return WordTableStyle.GridTable2Accent1;
                case "GridTable2-Accent2": return WordTableStyle.GridTable2Accent2;
                case "GridTable2-Accent3": return WordTableStyle.GridTable2Accent3;
                case "GridTable2-Accent4": return WordTableStyle.GridTable2Accent4;
                case "GridTable2-Accent5": return WordTableStyle.GridTable2Accent5;
                case "GridTable2-Accent6": return WordTableStyle.GridTable2Accent6;
                //// Grid Tables - Line 3
                case "GridTable3": return WordTableStyle.GridTable3;
                case "GridTable3-Accent1": return WordTableStyle.GridTable3Accent1;
                case "GridTable3-Accent2": return WordTableStyle.GridTable3Accent2;
                case "GridTable3-Accent3": return WordTableStyle.GridTable3Accent3;
                case "GridTable3-Accent4": return WordTableStyle.GridTable3Accent4;
                case "GridTable3-Accent5": return WordTableStyle.GridTable3Accent5;
                case "GridTable3-Accent6": return WordTableStyle.GridTable3Accent6;
                //// Grid Tables - Line 4
                case "GridTable4": return WordTableStyle.GridTable4;
                case "GridTable4-Accent1": return WordTableStyle.GridTable4Accent1;
                case "GridTable4-Accent2": return WordTableStyle.GridTable4Accent2;
                case "GridTable4-Accent3": return WordTableStyle.GridTable4Accent3;
                case "GridTable4-Accent4": return WordTableStyle.GridTable4Accent4;
                case "GridTable4-Accent5": return WordTableStyle.GridTable4Accent5;
                case "GridTable4-Accent6": return WordTableStyle.GridTable4Accent6;
                //// Grid Tables - Line 5
                case "GridTable5Dark": return WordTableStyle.GridTable5Dark;
                case "GridTable5Dark-Accent1": return WordTableStyle.GridTable5DarkAccent1;
                case "GridTable5Dark-Accent2": return WordTableStyle.GridTable5DarkAccent2;
                case "GridTable5Dark-Accent3": return WordTableStyle.GridTable5DarkAccent3;
                case "GridTable5Dark-Accent4": return WordTableStyle.GridTable5DarkAccent4;
                case "GridTable5Dark-Accent5": return WordTableStyle.GridTable5DarkAccent5;
                case "GridTable5Dark-Accent6": return WordTableStyle.GridTable5DarkAccent6;
                //// Grid Tables - Line 6
                case "GridTable6Colorful": return WordTableStyle.GridTable6Colorful;
                case "GridTable6Colorful-Accent1": return WordTableStyle.GridTable6ColorfulAccent1;
                case "GridTable6Colorful-Accent2": return WordTableStyle.GridTable6ColorfulAccent2;
                case "GridTable6Colorful-Accent3": return WordTableStyle.GridTable6ColorfulAccent3;
                case "GridTable6Colorful-Accent4": return WordTableStyle.GridTable6ColorfulAccent4;
                case "GridTable6Colorful-Accent5": return WordTableStyle.GridTable6ColorfulAccent5;
                case "GridTable6Colorful-Accent6": return WordTableStyle.GridTable6ColorfulAccent6;
                //// Grid Tables - Line 7
                case "GridTable7Colorful": return WordTableStyle.GridTable7Colorful;
                case "GridTable7Colorful-Accent1": return WordTableStyle.GridTable7ColorfulAccent1;
                case "GridTable7Colorful-Accent2": return WordTableStyle.GridTable7ColorfulAccent2;
                case "GridTable7Colorful-Accent3": return WordTableStyle.GridTable7ColorfulAccent3;
                case "GridTable7Colorful-Accent4": return WordTableStyle.GridTable7ColorfulAccent4;
                case "GridTable7Colorful-Accent5": return WordTableStyle.GridTable7ColorfulAccent5;
                case "GridTable7Colorful-Accent6": return WordTableStyle.GridTable7ColorfulAccent6;
                //// Grid Tables - Line 8
                case "ListTable1Light": return WordTableStyle.ListTable1Light;
                case "ListTable1Light-Accent1": return WordTableStyle.ListTable1LightAccent1;
                case "ListTable1Light-Accent2": return WordTableStyle.ListTable1LightAccent2;
                case "ListTable1Light-Accent3": return WordTableStyle.ListTable1LightAccent3;
                case "ListTable1Light-Accent4": return WordTableStyle.ListTable1LightAccent4;
                case "ListTable1Light-Accent5": return WordTableStyle.ListTable1LightAccent5;
                case "ListTable1Light-Accent6": return WordTableStyle.ListTable1LightAccent6;
                //// List Tables - Line 9
                case "ListTable2": return WordTableStyle.ListTable2;
                case "ListTable2-Accent1": return WordTableStyle.ListTable2Accent1;
                case "ListTable2-Accent2": return WordTableStyle.ListTable2Accent2;
                case "ListTable2-Accent3": return WordTableStyle.ListTable2Accent3;
                case "ListTable2-Accent4": return WordTableStyle.ListTable2Accent4;
                case "ListTable2-Accent5": return WordTableStyle.ListTable2Accent5;
                case "ListTable2-Accent6": return WordTableStyle.ListTable2Accent6;

                //// List Tables - Line 10
                case "ListTable3": return WordTableStyle.ListTable3;
                case "ListTable3-Accent1": return WordTableStyle.ListTable3Accent1;
                case "ListTable3-Accent2": return WordTableStyle.ListTable3Accent2;
                case "ListTable3-Accent3": return WordTableStyle.ListTable3Accent3;
                case "ListTable3-Accent4": return WordTableStyle.ListTable3Accent4;
                case "ListTable3-Accent5": return WordTableStyle.ListTable3Accent5;
                case "ListTable3-Accent6": return WordTableStyle.ListTable3Accent6;

                //// List Tables - Line 11
                case "ListTable4": return WordTableStyle.ListTable4;
                case "ListTable4-Accent1": return WordTableStyle.ListTable4Accent1;
                case "ListTable4-Accent2": return WordTableStyle.ListTable4Accent2;
                case "ListTable4-Accent3": return WordTableStyle.ListTable4Accent3;
                case "ListTable4-Accent4": return WordTableStyle.ListTable4Accent4;
                case "ListTable4-Accent5": return WordTableStyle.ListTable4Accent5;
                case "ListTable4-Accent6": return WordTableStyle.ListTable4Accent6;

                //// List Tables - Line 12
                case "ListTable5Dark": return WordTableStyle.ListTable5Dark;
                case "ListTable5Dark-Accent1": return WordTableStyle.ListTable5DarkAccent1;
                case "ListTable5Dark-Accent2": return WordTableStyle.ListTable5DarkAccent2;
                case "ListTable5Dark-Accent3": return WordTableStyle.ListTable5DarkAccent3;
                case "ListTable5Dark-Accent4": return WordTableStyle.ListTable5DarkAccent4;
                case "ListTable5Dark-Accent5": return WordTableStyle.ListTable5DarkAccent5;
                case "ListTable5Dark-Accent6": return WordTableStyle.ListTable5DarkAccent6;

                //// List Tables - Line 13
                case "ListTable6Colorful": return WordTableStyle.ListTable6Colorful;
                case "ListTable6Colorful-Accent1": return WordTableStyle.ListTable6ColorfulAccent1;
                case "ListTable6Colorful-Accent2": return WordTableStyle.ListTable6ColorfulAccent2;
                case "ListTable6Colorful-Accent3": return WordTableStyle.ListTable6ColorfulAccent3;
                case "ListTable6Colorful-Accent4": return WordTableStyle.ListTable6ColorfulAccent4;
                case "ListTable6Colorful-Accent5": return WordTableStyle.ListTable6ColorfulAccent5;
                case "ListTable6Colorful-Accent6": return WordTableStyle.ListTable6ColorfulAccent6;

                //// List Tables - Line 14
                case "ListTable7Colorful": return WordTableStyle.ListTable7Colorful;
                case "ListTable7Colorful-Accent1": return WordTableStyle.ListTable7ColorfulAccent1;
                case "ListTable7Colorful-Accent2": return WordTableStyle.ListTable7ColorfulAccent2;
                case "ListTable7Colorful-Accent3": return WordTableStyle.ListTable7ColorfulAccent3;
                case "ListTable7Colorful-Accent4": return WordTableStyle.ListTable7ColorfulAccent4;
                case "ListTable7Colorful-Accent5": return WordTableStyle.ListTable7ColorfulAccent5;
                case "ListTable7Colorful-Accent6": return WordTableStyle.ListTable7ColorfulAccent6;

            }
            throw new ArgumentOutOfRangeException(nameof(style));
        }
        public static TableStyle GetStyle(WordTableStyle style) {
            switch (style) {
                // Grid Tables - Line 1
                case OfficeIMO.WordTableStyle.TableNormal: return new TableStyle() {Val = "TableNormal"};
                case OfficeIMO.WordTableStyle.TableGrid: return new TableStyle() {Val = "TableGrid"};
                case OfficeIMO.WordTableStyle.PlainTable1: return new TableStyle() {Val = "PlainTable1"};
                case OfficeIMO.WordTableStyle.PlainTable2: return new TableStyle() {Val = "PlainTable2"};
                case OfficeIMO.WordTableStyle.PlainTable3: return new TableStyle() {Val = "PlainTable3"};
                case OfficeIMO.WordTableStyle.PlainTable4: return new TableStyle() {Val = "PlainTable4"};
                case OfficeIMO.WordTableStyle.PlainTable5: return new TableStyle() {Val = "PlainTable5"};
                // Grid Tables - Line 1
                case OfficeIMO.WordTableStyle.GridTable1Light: return new TableStyle() {Val = "GridTable1Light"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent1: return new TableStyle() {Val = "GridTable1Light-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent2: return new TableStyle() {Val = "GridTable1Light-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent3: return new TableStyle() {Val = "GridTable1Light-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent4: return new TableStyle() {Val = "GridTable1Light-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent5: return new TableStyle() {Val = "GridTable1Light-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable1LightAccent6: return new TableStyle() {Val = "GridTable1Light-Accent6"};
                // Grid Tables - Line 2
                case OfficeIMO.WordTableStyle.GridTable2: return new TableStyle() {Val = "GridTable2"};
                case OfficeIMO.WordTableStyle.GridTable2Accent1: return new TableStyle() {Val = "GridTable2-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable2Accent2: return new TableStyle() {Val = "GridTable2-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable2Accent3: return new TableStyle() {Val = "GridTable2-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable2Accent4: return new TableStyle() {Val = "GridTable2-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable2Accent5: return new TableStyle() {Val = "GridTable2-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable2Accent6: return new TableStyle() {Val = "GridTable2-Accent6"};
                // Grid Tables - Line 3
                case OfficeIMO.WordTableStyle.GridTable3: return new TableStyle() {Val = "GridTable3"};
                case OfficeIMO.WordTableStyle.GridTable3Accent1: return new TableStyle() {Val = "GridTable3-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable3Accent2: return new TableStyle() {Val = "GridTable3-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable3Accent3: return new TableStyle() {Val = "GridTable3-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable3Accent4: return new TableStyle() {Val = "GridTable3-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable3Accent5: return new TableStyle() {Val = "GridTable3-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable3Accent6: return new TableStyle() {Val = "GridTable3-Accent6"};
                // Grid Tables - Line 4
                case OfficeIMO.WordTableStyle.GridTable4: return new TableStyle() {Val = "GridTable4"};
                case OfficeIMO.WordTableStyle.GridTable4Accent2: return new TableStyle() {Val = "GridTable4-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable4Accent1: return new TableStyle() {Val = "GridTable4-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable4Accent3: return new TableStyle() {Val = "GridTable4-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable4Accent4: return new TableStyle() {Val = "GridTable4-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable4Accent5: return new TableStyle() {Val = "GridTable4-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable4Accent6: return new TableStyle() {Val = "GridTable4-Accent6"};
                // Grid Tables - Line 5
                case OfficeIMO.WordTableStyle.GridTable5Dark: return new TableStyle() {Val = "GridTable5Dark"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent1: return new TableStyle() {Val = "GridTable5Dark-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent2: return new TableStyle() {Val = "GridTable5Dark-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent3: return new TableStyle() {Val = "GridTable5Dark-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent4: return new TableStyle() {Val = "GridTable5Dark-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent5: return new TableStyle() {Val = "GridTable5Dark-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable5DarkAccent6: return new TableStyle() {Val = "GridTable5Dark-Accent6"};
                // Grid Tables - Line 6
                case OfficeIMO.WordTableStyle.GridTable6Colorful: return new TableStyle() {Val = "GridTable6Colorful"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent1: return new TableStyle() {Val = "GridTable6Colorful-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent2: return new TableStyle() {Val = "GridTable6Colorful-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent3: return new TableStyle() {Val = "GridTable6Colorful-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent4: return new TableStyle() {Val = "GridTable6Colorful-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent5: return new TableStyle() {Val = "GridTable6Colorful-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable6ColorfulAccent6: return new TableStyle() {Val = "GridTable6Colorful-Accent6"};
                // Grid Tables - Line 7
                case OfficeIMO.WordTableStyle.GridTable7Colorful: return new TableStyle() {Val = "GridTable7Colorful"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent1: return new TableStyle() {Val = "GridTable7Colorful-Accent1"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent2: return new TableStyle() {Val = "GridTable7Colorful-Accent2"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent3: return new TableStyle() {Val = "GridTable7Colorful-Accent3"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent4: return new TableStyle() {Val = "GridTable7Colorful-Accent4"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent5: return new TableStyle() {Val = "GridTable7Colorful-Accent5"};
                case OfficeIMO.WordTableStyle.GridTable7ColorfulAccent6: return new TableStyle() {Val = "GridTable7Colorful-Accent6"};
                // Grid Tables - Line 8
                case OfficeIMO.WordTableStyle.ListTable1Light: return new TableStyle() {Val = "ListTable1Light"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent1: return new TableStyle() {Val = "ListTable1Light-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent2: return new TableStyle() {Val = "ListTable1Light-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent3: return new TableStyle() {Val = "ListTable1Light-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent4: return new TableStyle() {Val = "ListTable1Light-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent5: return new TableStyle() {Val = "ListTable1Light-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable1LightAccent6: return new TableStyle() {Val = "ListTable1Light-Accent6"};
                // Grid Tables - Line 9
                case OfficeIMO.WordTableStyle.ListTable2: return new TableStyle() {Val = "ListTable2"};
                case OfficeIMO.WordTableStyle.ListTable2Accent1: return new TableStyle() {Val = "ListTable2-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable2Accent2: return new TableStyle() {Val = "ListTable2-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable2Accent3: return new TableStyle() {Val = "ListTable2-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable2Accent4: return new TableStyle() {Val = "ListTable2-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable2Accent5: return new TableStyle() {Val = "ListTable2-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable2Accent6: return new TableStyle() {Val = "ListTable2-Accent6"};
                // Grid Tables - Line 10
                case OfficeIMO.WordTableStyle.ListTable3: return new TableStyle() {Val = "ListTable3"};
                case OfficeIMO.WordTableStyle.ListTable3Accent1: return new TableStyle() {Val = "ListTable3-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable3Accent2: return new TableStyle() {Val = "ListTable3-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable3Accent3: return new TableStyle() {Val = "ListTable3-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable3Accent4: return new TableStyle() {Val = "ListTable3-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable3Accent5: return new TableStyle() {Val = "ListTable3-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable3Accent6: return new TableStyle() {Val = "ListTable3-Accent6"};
                // Grid Tables - Line 11
                case OfficeIMO.WordTableStyle.ListTable4: return new TableStyle() {Val = "ListTable4"};
                case OfficeIMO.WordTableStyle.ListTable4Accent1: return new TableStyle() {Val = "ListTable4-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable4Accent2: return new TableStyle() {Val = "ListTable4-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable4Accent3: return new TableStyle() {Val = "ListTable4-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable4Accent4: return new TableStyle() {Val = "ListTable4-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable4Accent5: return new TableStyle() {Val = "ListTable4-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable4Accent6: return new TableStyle() {Val = "ListTable4-Accent6"};
                // Grid Tables - Line 12
                case OfficeIMO.WordTableStyle.ListTable5Dark: return new TableStyle() {Val = "ListTable5Dark"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent1: return new TableStyle() {Val = "ListTable5Dark-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent2: return new TableStyle() {Val = "ListTable5Dark-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent3: return new TableStyle() {Val = "ListTable5Dark-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent4: return new TableStyle() {Val = "ListTable5Dark-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent5: return new TableStyle() {Val = "ListTable5Dark-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable5DarkAccent6: return new TableStyle() {Val = "ListTable5Dark-Accent6"};
                // Grid Tables - Line 13
                case OfficeIMO.WordTableStyle.ListTable6Colorful: return new TableStyle() {Val = "ListTable6Colorful"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent1: return new TableStyle() {Val = "ListTable6Colorful-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent2: return new TableStyle() {Val = "ListTable6Colorful-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent3: return new TableStyle() {Val = "ListTable6Colorful-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent4: return new TableStyle() {Val = "ListTable6Colorful-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent5: return new TableStyle() {Val = "ListTable6Colorful-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable6ColorfulAccent6: return new TableStyle() {Val = "ListTable6Colorful-Accent6"};
                // Grid Tables - Line 14
                case OfficeIMO.WordTableStyle.ListTable7Colorful: return new TableStyle() {Val = "ListTable7Colorful"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent1: return new TableStyle() {Val = "ListTable7Colorful-Accent1"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent2: return new TableStyle() {Val = "ListTable7Colorful-Accent2"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent3: return new TableStyle() {Val = "ListTable7Colorful-Accent3"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent4: return new TableStyle() {Val = "ListTable7Colorful-Accent4"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent5: return new TableStyle() {Val = "ListTable7Colorful-Accent5"};
                case OfficeIMO.WordTableStyle.ListTable7ColorfulAccent6: return new TableStyle() {Val = "ListTable7Colorful-Accent6"};
            }

            throw new ArgumentOutOfRangeException(nameof(style));
        }

        internal static Style GenerateStyleTableNormal() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "TableNormal", Default = true};
            StyleName styleName1 = new StyleName() {Val = "Normal Table"};
            UIPriority uIPriority1 = new UIPriority() {Val = 99};
            SemiHidden semiHidden1 = new SemiHidden();
            UnhideWhenUsed unhideWhenUsed1 = new UnhideWhenUsed();

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableIndentation tableIndentation1 = new TableIndentation() {Width = 0, Type = TableWidthUnitValues.Dxa};

            TableCellMarginDefault tableCellMarginDefault1 = new TableCellMarginDefault();
            TopMargin topMargin1 = new TopMargin() {Width = "0", Type = TableWidthUnitValues.Dxa};
            TableCellLeftMargin tableCellLeftMargin1 = new TableCellLeftMargin() {Width = 108, Type = TableWidthValues.Dxa};
            BottomMargin bottomMargin1 = new BottomMargin() {Width = "0", Type = TableWidthUnitValues.Dxa};
            TableCellRightMargin tableCellRightMargin1 = new TableCellRightMargin() {Width = 108, Type = TableWidthValues.Dxa};

            tableCellMarginDefault1.Append(topMargin1);
            tableCellMarginDefault1.Append(tableCellLeftMargin1);
            tableCellMarginDefault1.Append(bottomMargin1);
            tableCellMarginDefault1.Append(tableCellRightMargin1);

            styleTableProperties1.Append(tableIndentation1);
            styleTableProperties1.Append(tableCellMarginDefault1);

            style1.Append(styleName1);
            style1.Append(uIPriority1);
            style1.Append(semiHidden1);
            style1.Append(unhideWhenUsed1);
            style1.Append(styleTableProperties1);
            return style1;
        }

        internal static Style GenerateStyleTableGrid() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "TableGrid"};
            StyleName styleName1 = new StyleName() {Val = "Table Grid"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 39};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "auto", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableBorders1);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            return style1;
        }

        internal static Style GenerateStylePlainTable1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "PlainTable1"};
            StyleName styleName1 = new StyleName() {Val = "Plain Table 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 41};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties3);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStylePlainTable2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "PlainTable2"};
            StyleName styleName1 = new StyleName() {Val = "Plain Table 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 42};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(leftBorder1);
            tableCellBorders3.Append(rightBorder1);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);
            tableCellBorders4.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties5);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            return style1;
        }

        internal static Style GenerateStylePlainTable3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "PlainTable3"};
            StyleName styleName1 = new StyleName() {Val = "Plain Table 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 43};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Caps caps1 = new Caps();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(caps1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Caps caps2 = new Caps();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(caps2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Caps caps3 = new Caps();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(caps3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Caps caps4 = new Caps();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(caps4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(leftBorder1);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            return style1;
        }

        internal static Style GenerateStylePlainTable4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "PlainTable4"};
            StyleName styleName1 = new StyleName() {Val = "Plain Table 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 44};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStylePlainTable5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "PlainTable5"};
            StyleName styleName1 = new StyleName() {Val = "Plain Table 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 45};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "7F7F7F", ThemeColor = ThemeColorValues.Text1, ThemeTint = "80", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F2F2F2", ThemeFill = ThemeColorValues.Background1, ThemeFillShade = "F2"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleTableGridLight() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "TableGridLight"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table Light"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 40};
            Rsid rsid1 = new Rsid() {Val = "0086528E"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "BFBFBF", ThemeColor = ThemeColorValues.Background1, ThemeShade = "BF", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableBorders1);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            return style1;
        }

        internal static Style GenerateStyleGridTable1Light() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "999999", ThemeColor = ThemeColorValues.Text1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "B4C6E7", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F7CAAC", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "DBDBDB", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFE599", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "BDD6EE", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable1LightAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable1Light-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 1 Light Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "002A7BC6"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C5E0B3", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "66", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            return style1;
        }

        internal static Style GenerateStyleGridTable2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable2Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable2-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 2 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 2U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(topBorder3);
            tableCellBorders2.Append(bottomBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable3Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable3-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 3 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable4Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable4-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 4 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5Dark() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "999999", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "999999", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "B4C6E7", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "B4C6E7", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F7CAAC", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "F7CAAC", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DBDBDB", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DBDBDB", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFE599", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFE599", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "BDD6EE", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "BDD6EE", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable5DarkAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable5Dark-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 5 Dark Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading2);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();
            Color color2 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            runPropertiesBaseStyle2.Append(color2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading3);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();
            Color color3 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            runPropertiesBaseStyle3.Append(color3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading4);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();
            Color color4 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            runPropertiesBaseStyle4.Append(color4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading5);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "C5E0B3", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading6);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading7 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "C5E0B3", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "66"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading7);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6Colorful() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "000000", ThemeColor = ThemeColorValues.Text1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2F5496", ThemeColor = ThemeColorValues.Accent1, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "C45911", ThemeColor = ThemeColorValues.Accent2, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "7B7B7B", ThemeColor = ThemeColorValues.Accent3, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "BF8F00", ThemeColor = ThemeColorValues.Accent4, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2E74B5", ThemeColor = ThemeColorValues.Accent5, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable6ColorfulAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable6Colorful-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 6 Colorful Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "538135", ThemeColor = ThemeColorValues.Accent6, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 12U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleGridTable7Colorful() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "000000", ThemeColor = ThemeColorValues.Text1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2F5496", ThemeColor = ThemeColorValues.Accent1, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "C45911", ThemeColor = ThemeColorValues.Accent2, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "7B7B7B", ThemeColor = ThemeColorValues.Accent3, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "BF8F00", ThemeColor = ThemeColorValues.Accent4, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2E74B5", ThemeColor = ThemeColorValues.Accent5, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleGridTable7ColorfulAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "GridTable7Colorful-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "Grid Table 7 Colorful Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "0079034C"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "538135", ThemeColor = ThemeColorValues.Accent6, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideVerticalBorder insideVerticalBorder1 = new InsideVerticalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);
            tableBorders1.Append(insideVerticalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder2 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            tableCellBorders1.Append(insideVerticalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder3 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder3 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(leftBorder3);
            tableCellBorders2.Append(bottomBorder2);
            tableCellBorders2.Append(rightBorder3);
            tableCellBorders2.Append(insideHorizontalBorder3);
            tableCellBorders2.Append(insideVerticalBorder3);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();

            runPropertiesBaseStyle3.Append(italic1);
            runPropertiesBaseStyle3.Append(italicComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder4 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder4 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(topBorder3);
            tableCellBorders3.Append(leftBorder4);
            tableCellBorders3.Append(bottomBorder3);
            tableCellBorders3.Append(insideHorizontalBorder4);
            tableCellBorders3.Append(insideVerticalBorder4);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();

            runPropertiesBaseStyle4.Append(italic2);
            runPropertiesBaseStyle4.Append(italicComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};
            InsideHorizontalBorder insideHorizontalBorder5 = new InsideHorizontalBorder() {Val = BorderValues.Nil};
            InsideVerticalBorder insideVerticalBorder5 = new InsideVerticalBorder() {Val = BorderValues.Nil};

            tableCellBorders4.Append(topBorder4);
            tableCellBorders4.Append(bottomBorder4);
            tableCellBorders4.Append(rightBorder4);
            tableCellBorders4.Append(insideHorizontalBorder5);
            tableCellBorders4.Append(insideVerticalBorder5);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            BottomBorder bottomBorder5 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(bottomBorder5);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            BottomBorder bottomBorder6 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(bottomBorder6);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder6 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders8.Append(topBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable1Light() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable1LightAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable1Light-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 1 Light Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 46};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable2Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable2-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 2 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 47};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties2);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable3Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable3-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 3 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 48};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(topBorder2);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders2.Append(rightBorder2);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders3.Append(leftBorder2);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder3);
            tableCellBorders4.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders4);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(topBorder3);
            tableCellBorders5.Append(bottomBorder2);
            tableCellBorders5.Append(insideHorizontalBorder1);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders5);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Nil};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders6);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            BottomBorder bottomBorder4 = new BottomBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(bottomBorder4);
            tableCellBorders7.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders7);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Double, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(topBorder4);
            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders8);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Double, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(topBorder5);
            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders9);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "666666", ThemeColor = ThemeColorValues.Text1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "8EAADB", ThemeColor = ThemeColorValues.Accent1, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "F4B083", ThemeColor = ThemeColorValues.Accent2, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "C9C9C9", ThemeColor = ThemeColorValues.Accent3, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "FFD966", ThemeColor = ThemeColorValues.Accent4, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "9CC2E5", ThemeColor = ThemeColorValues.Accent5, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable4Accent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable4-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 4 Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 49};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder1 = new InsideHorizontalBorder() {Val = BorderValues.Single, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);
            tableBorders1.Append(insideHorizontalBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            runPropertiesBaseStyle1.Append(color1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            InsideHorizontalBorder insideHorizontalBorder2 = new InsideHorizontalBorder() {Val = BorderValues.Nil};

            tableCellBorders1.Append(topBorder2);
            tableCellBorders1.Append(leftBorder2);
            tableCellBorders1.Append(bottomBorder2);
            tableCellBorders1.Append(rightBorder2);
            tableCellBorders1.Append(insideHorizontalBorder2);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Double, Color = "A8D08D", ThemeColor = ThemeColorValues.Accent6, ThemeTint = "99", Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder3);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading2);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading3);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable5Dark() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "000000", ThemeFill = ThemeColorValues.Text1};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "4472C4", ThemeFill = ThemeColorValues.Accent1};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "ED7D31", ThemeFill = ThemeColorValues.Accent2};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "A5A5A5", ThemeFill = ThemeColorValues.Accent3};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFC000", ThemeFill = ThemeColorValues.Accent4};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "5B9BD5", ThemeFill = ThemeColorValues.Accent5};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable5DarkAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable5Dark-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 5 Dark Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 50};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "FFFFFF", ThemeColor = ThemeColorValues.Background1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 24U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(leftBorder1);
            tableBorders1.Append(bottomBorder1);
            tableBorders1.Append(rightBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            StyleTableCellProperties styleTableCellProperties1 = new StyleTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "70AD47", ThemeFill = ThemeColorValues.Accent6};

            styleTableCellProperties1.Append(shading1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 18U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders5.Append(leftBorder3);
            tableCellBorders5.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties5.Append(tableCellBorders5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band2Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            LeftBorder leftBorder4 = new LeftBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            RightBorder rightBorder4 = new RightBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders6.Append(leftBorder4);
            tableCellBorders6.Append(rightBorder4);

            tableStyleConditionalFormattingTableCellProperties6.Append(tableCellBorders6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            TopBorder topBorder3 = new TopBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder3 = new BottomBorder() {Val = BorderValues.Single, Color = "FFFFFF", ThemeColor = ThemeColorValues.Background1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders7.Append(topBorder3);
            tableCellBorders7.Append(bottomBorder3);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders7);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            LeftBorder leftBorder5 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(leftBorder5);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders8);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders9 = new TableCellBorders();
            RightBorder rightBorder5 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders9.Append(rightBorder5);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders9);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders10 = new TableCellBorders();
            TopBorder topBorder4 = new TopBorder() {Val = BorderValues.Nil};
            LeftBorder leftBorder6 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders10.Append(topBorder4);
            tableCellBorders10.Append(leftBorder6);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders10);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            TableStyleProperties tableStyleProperties11 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties11 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties11 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders11 = new TableCellBorders();
            TopBorder topBorder5 = new TopBorder() {Val = BorderValues.Nil};
            RightBorder rightBorder6 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders11.Append(topBorder5);
            tableCellBorders11.Append(rightBorder6);

            tableStyleConditionalFormattingTableCellProperties11.Append(tableCellBorders11);

            tableStyleProperties11.Append(tableStyleConditionalFormattingTableProperties11);
            tableStyleProperties11.Append(tableStyleConditionalFormattingTableCellProperties11);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(styleTableCellProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            style1.Append(tableStyleProperties11);
            return style1;
        }

        internal static Style GenerateStyleListTable6Colorful() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "000000", ThemeColor = ThemeColorValues.Text1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }


        internal static Style GenerateStyleListTable6ColorfulAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2F5496", ThemeColor = ThemeColorValues.Accent1, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable6ColorfulAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "C45911", ThemeColor = ThemeColorValues.Accent2, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable6ColorfulAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "7B7B7B", ThemeColor = ThemeColorValues.Accent3, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable6ColorfulAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "BF8F00", ThemeColor = ThemeColorValues.Accent4, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable6ColorfulAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2E74B5", ThemeColor = ThemeColorValues.Accent5, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable6ColorfulAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable6Colorful-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 6 Colorful Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 51};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "538135", ThemeColor = ThemeColorValues.Accent6, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            TableBorders tableBorders1 = new TableBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableBorders1.Append(topBorder1);
            tableBorders1.Append(bottomBorder1);

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);
            styleTableProperties1.Append(tableBorders1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            Bold bold1 = new Bold();
            BoldComplexScript boldComplexScript1 = new BoldComplexScript();

            runPropertiesBaseStyle1.Append(bold1);
            runPropertiesBaseStyle1.Append(boldComplexScript1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder2 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder2);

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            Bold bold2 = new Bold();
            BoldComplexScript boldComplexScript2 = new BoldComplexScript();

            runPropertiesBaseStyle2.Append(bold2);
            runPropertiesBaseStyle2.Append(boldComplexScript2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder2 = new TopBorder() {Val = BorderValues.Double, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder2);

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            Bold bold3 = new Bold();
            BoldComplexScript boldComplexScript3 = new BoldComplexScript();

            runPropertiesBaseStyle3.Append(bold3);
            runPropertiesBaseStyle3.Append(boldComplexScript3);

            tableStyleProperties3.Append(runPropertiesBaseStyle3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            Bold bold4 = new Bold();
            BoldComplexScript boldComplexScript4 = new BoldComplexScript();

            runPropertiesBaseStyle4.Append(bold4);
            runPropertiesBaseStyle4.Append(boldComplexScript4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties3.Append(shading1);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties4.Append(shading2);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties4);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            return style1;
        }

        internal static Style GenerateStyleListTable7Colorful() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "000000", ThemeColor = ThemeColorValues.Text1};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "000000", ThemeColor = ThemeColorValues.Text1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "CCCCCC", ThemeFill = ThemeColorValues.Text1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent1() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent1"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 1"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2F5496", ThemeColor = ThemeColorValues.Accent1, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "4472C4", ThemeColor = ThemeColorValues.Accent1, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "D9E2F3", ThemeFill = ThemeColorValues.Accent1, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent2() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent2"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 2"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "C45911", ThemeColor = ThemeColorValues.Accent2, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "ED7D31", ThemeColor = ThemeColorValues.Accent2, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FBE4D5", ThemeFill = ThemeColorValues.Accent2, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent3() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent3"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 3"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "7B7B7B", ThemeColor = ThemeColorValues.Accent3, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "A5A5A5", ThemeColor = ThemeColorValues.Accent3, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "EDEDED", ThemeFill = ThemeColorValues.Accent3, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent4() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent4"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 4"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "BF8F00", ThemeColor = ThemeColorValues.Accent4, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "FFC000", ThemeColor = ThemeColorValues.Accent4, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFF2CC", ThemeFill = ThemeColorValues.Accent4, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent5() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent5"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 5"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "2E74B5", ThemeColor = ThemeColorValues.Accent5, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "5B9BD5", ThemeColor = ThemeColorValues.Accent5, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "DEEAF6", ThemeFill = ThemeColorValues.Accent5, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }

        internal static Style GenerateStyleListTable7ColorfulAccent6() {
            Style style1 = new Style() {Type = StyleValues.Table, StyleId = "ListTable7Colorful-Accent6"};
            StyleName styleName1 = new StyleName() {Val = "List Table 7 Colorful Accent 6"};
            BasedOn basedOn1 = new BasedOn() {Val = "TableNormal"};
            UIPriority uIPriority1 = new UIPriority() {Val = 52};
            Rsid rsid1 = new Rsid() {Val = "00F85B9A"};

            StyleParagraphProperties styleParagraphProperties1 = new StyleParagraphProperties();
            SpacingBetweenLines spacingBetweenLines1 = new SpacingBetweenLines() {After = "0", Line = "240", LineRule = LineSpacingRuleValues.Auto};

            styleParagraphProperties1.Append(spacingBetweenLines1);

            StyleRunProperties styleRunProperties1 = new StyleRunProperties();
            Color color1 = new Color() {Val = "538135", ThemeColor = ThemeColorValues.Accent6, ThemeShade = "BF"};

            styleRunProperties1.Append(color1);

            StyleTableProperties styleTableProperties1 = new StyleTableProperties();
            TableStyleRowBandSize tableStyleRowBandSize1 = new TableStyleRowBandSize() {Val = 1};
            TableStyleColumnBandSize tableStyleColumnBandSize1 = new TableStyleColumnBandSize() {Val = 1};

            styleTableProperties1.Append(tableStyleRowBandSize1);
            styleTableProperties1.Append(tableStyleColumnBandSize1);

            TableStyleProperties tableStyleProperties1 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle1 = new RunPropertiesBaseStyle();
            RunFonts runFonts1 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic1 = new Italic();
            ItalicComplexScript italicComplexScript1 = new ItalicComplexScript();
            FontSize fontSize1 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle1.Append(runFonts1);
            runPropertiesBaseStyle1.Append(italic1);
            runPropertiesBaseStyle1.Append(italicComplexScript1);
            runPropertiesBaseStyle1.Append(fontSize1);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties1 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties1 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders1 = new TableCellBorders();
            BottomBorder bottomBorder1 = new BottomBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders1.Append(bottomBorder1);
            Shading shading1 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties1.Append(tableCellBorders1);
            tableStyleConditionalFormattingTableCellProperties1.Append(shading1);

            tableStyleProperties1.Append(runPropertiesBaseStyle1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableProperties1);
            tableStyleProperties1.Append(tableStyleConditionalFormattingTableCellProperties1);

            TableStyleProperties tableStyleProperties2 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastRow};

            RunPropertiesBaseStyle runPropertiesBaseStyle2 = new RunPropertiesBaseStyle();
            RunFonts runFonts2 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic2 = new Italic();
            ItalicComplexScript italicComplexScript2 = new ItalicComplexScript();
            FontSize fontSize2 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle2.Append(runFonts2);
            runPropertiesBaseStyle2.Append(italic2);
            runPropertiesBaseStyle2.Append(italicComplexScript2);
            runPropertiesBaseStyle2.Append(fontSize2);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties2 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties2 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders2 = new TableCellBorders();
            TopBorder topBorder1 = new TopBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders2.Append(topBorder1);
            Shading shading2 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties2.Append(tableCellBorders2);
            tableStyleConditionalFormattingTableCellProperties2.Append(shading2);

            tableStyleProperties2.Append(runPropertiesBaseStyle2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableProperties2);
            tableStyleProperties2.Append(tableStyleConditionalFormattingTableCellProperties2);

            TableStyleProperties tableStyleProperties3 = new TableStyleProperties() {Type = TableStyleOverrideValues.FirstColumn};

            StyleParagraphProperties styleParagraphProperties2 = new StyleParagraphProperties();
            Justification justification1 = new Justification() {Val = JustificationValues.Right};

            styleParagraphProperties2.Append(justification1);

            RunPropertiesBaseStyle runPropertiesBaseStyle3 = new RunPropertiesBaseStyle();
            RunFonts runFonts3 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic3 = new Italic();
            ItalicComplexScript italicComplexScript3 = new ItalicComplexScript();
            FontSize fontSize3 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle3.Append(runFonts3);
            runPropertiesBaseStyle3.Append(italic3);
            runPropertiesBaseStyle3.Append(italicComplexScript3);
            runPropertiesBaseStyle3.Append(fontSize3);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties3 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties3 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders3 = new TableCellBorders();
            RightBorder rightBorder1 = new RightBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders3.Append(rightBorder1);
            Shading shading3 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties3.Append(tableCellBorders3);
            tableStyleConditionalFormattingTableCellProperties3.Append(shading3);

            tableStyleProperties3.Append(styleParagraphProperties2);
            tableStyleProperties3.Append(runPropertiesBaseStyle3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableProperties3);
            tableStyleProperties3.Append(tableStyleConditionalFormattingTableCellProperties3);

            TableStyleProperties tableStyleProperties4 = new TableStyleProperties() {Type = TableStyleOverrideValues.LastColumn};

            RunPropertiesBaseStyle runPropertiesBaseStyle4 = new RunPropertiesBaseStyle();
            RunFonts runFonts4 = new RunFonts() {AsciiTheme = ThemeFontValues.MajorHighAnsi, HighAnsiTheme = ThemeFontValues.MajorHighAnsi, EastAsiaTheme = ThemeFontValues.MajorEastAsia, ComplexScriptTheme = ThemeFontValues.MajorBidi};
            Italic italic4 = new Italic();
            ItalicComplexScript italicComplexScript4 = new ItalicComplexScript();
            FontSize fontSize4 = new FontSize() {Val = "26"};

            runPropertiesBaseStyle4.Append(runFonts4);
            runPropertiesBaseStyle4.Append(italic4);
            runPropertiesBaseStyle4.Append(italicComplexScript4);
            runPropertiesBaseStyle4.Append(fontSize4);
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties4 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties4 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders4 = new TableCellBorders();
            LeftBorder leftBorder1 = new LeftBorder() {Val = BorderValues.Single, Color = "70AD47", ThemeColor = ThemeColorValues.Accent6, Size = (UInt32Value) 4U, Space = (UInt32Value) 0U};

            tableCellBorders4.Append(leftBorder1);
            Shading shading4 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "FFFFFF", ThemeFill = ThemeColorValues.Background1};

            tableStyleConditionalFormattingTableCellProperties4.Append(tableCellBorders4);
            tableStyleConditionalFormattingTableCellProperties4.Append(shading4);

            tableStyleProperties4.Append(runPropertiesBaseStyle4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableProperties4);
            tableStyleProperties4.Append(tableStyleConditionalFormattingTableCellProperties4);

            TableStyleProperties tableStyleProperties5 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Vertical};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties5 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties5 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading5 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties5.Append(shading5);

            tableStyleProperties5.Append(tableStyleConditionalFormattingTableProperties5);
            tableStyleProperties5.Append(tableStyleConditionalFormattingTableCellProperties5);

            TableStyleProperties tableStyleProperties6 = new TableStyleProperties() {Type = TableStyleOverrideValues.Band1Horizontal};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties6 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties6 = new TableStyleConditionalFormattingTableCellProperties();
            Shading shading6 = new Shading() {Val = ShadingPatternValues.Clear, Color = "auto", Fill = "E2EFD9", ThemeFill = ThemeColorValues.Accent6, ThemeFillTint = "33"};

            tableStyleConditionalFormattingTableCellProperties6.Append(shading6);

            tableStyleProperties6.Append(tableStyleConditionalFormattingTableProperties6);
            tableStyleProperties6.Append(tableStyleConditionalFormattingTableCellProperties6);

            TableStyleProperties tableStyleProperties7 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties7 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties7 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders5 = new TableCellBorders();
            LeftBorder leftBorder2 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders5.Append(leftBorder2);

            tableStyleConditionalFormattingTableCellProperties7.Append(tableCellBorders5);

            tableStyleProperties7.Append(tableStyleConditionalFormattingTableProperties7);
            tableStyleProperties7.Append(tableStyleConditionalFormattingTableCellProperties7);

            TableStyleProperties tableStyleProperties8 = new TableStyleProperties() {Type = TableStyleOverrideValues.NorthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties8 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties8 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders6 = new TableCellBorders();
            RightBorder rightBorder2 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders6.Append(rightBorder2);

            tableStyleConditionalFormattingTableCellProperties8.Append(tableCellBorders6);

            tableStyleProperties8.Append(tableStyleConditionalFormattingTableProperties8);
            tableStyleProperties8.Append(tableStyleConditionalFormattingTableCellProperties8);

            TableStyleProperties tableStyleProperties9 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthEastCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties9 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties9 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders7 = new TableCellBorders();
            LeftBorder leftBorder3 = new LeftBorder() {Val = BorderValues.Nil};

            tableCellBorders7.Append(leftBorder3);

            tableStyleConditionalFormattingTableCellProperties9.Append(tableCellBorders7);

            tableStyleProperties9.Append(tableStyleConditionalFormattingTableProperties9);
            tableStyleProperties9.Append(tableStyleConditionalFormattingTableCellProperties9);

            TableStyleProperties tableStyleProperties10 = new TableStyleProperties() {Type = TableStyleOverrideValues.SouthWestCell};
            TableStyleConditionalFormattingTableProperties tableStyleConditionalFormattingTableProperties10 = new TableStyleConditionalFormattingTableProperties();

            TableStyleConditionalFormattingTableCellProperties tableStyleConditionalFormattingTableCellProperties10 = new TableStyleConditionalFormattingTableCellProperties();

            TableCellBorders tableCellBorders8 = new TableCellBorders();
            RightBorder rightBorder3 = new RightBorder() {Val = BorderValues.Nil};

            tableCellBorders8.Append(rightBorder3);

            tableStyleConditionalFormattingTableCellProperties10.Append(tableCellBorders8);

            tableStyleProperties10.Append(tableStyleConditionalFormattingTableProperties10);
            tableStyleProperties10.Append(tableStyleConditionalFormattingTableCellProperties10);

            style1.Append(styleName1);
            style1.Append(basedOn1);
            style1.Append(uIPriority1);
            style1.Append(rsid1);
            style1.Append(styleParagraphProperties1);
            style1.Append(styleRunProperties1);
            style1.Append(styleTableProperties1);
            style1.Append(tableStyleProperties1);
            style1.Append(tableStyleProperties2);
            style1.Append(tableStyleProperties3);
            style1.Append(tableStyleProperties4);
            style1.Append(tableStyleProperties5);
            style1.Append(tableStyleProperties6);
            style1.Append(tableStyleProperties7);
            style1.Append(tableStyleProperties8);
            style1.Append(tableStyleProperties9);
            style1.Append(tableStyleProperties10);
            return style1;
        }
    }
}