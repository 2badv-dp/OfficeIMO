# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - docs

pr:
  autoCancel: true
  branches:
    include:
      - '*'
  paths:
    exclude:
      - docs

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install Nuget Tool Installer'

- script: |
    brew update
    brew tap caskroom/cask
    brew install mono-libgdiplus
  displayName: "Install Mono-libgdiplus"

- task: UseDotNet@2
  displayName: 'Install .NET 6.0'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

- task: UseDotNet@2
  displayName: 'Install .NET 5.0'
  inputs:
    packageType: 'sdk'
    version: '5.0.100'
    includePreviewVersions: true

- task: UseDotNet@2
  displayName: Install .NET 3.1
  inputs:
    version: '3.1.x'
    packageType: sdk
    includePreviewVersions: false

# Add a Command To List the Current .NET SDKs (Sanity Check)
- task: CmdLine@2
  displayName: 'List available .NET SDKs'
  inputs:
    script: 'dotnet --list-sdks'

- task: NuGetCommand@2
  displayName: Install Nuget Packages
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Install Nuget Packages'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: CmdLine@2
  displayName: 'Install Global Tools...'
  inputs:
    targetType: 'inline'
    script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    publishTestResults: true
    projects: '**/*.Tests.csproj'
    testRunTitle: 'Linux Test Run $(buildConfiguration), CPU: $(buildPlatform)'

#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish Code Coverage Report'
#  inputs:
#    codeCoverageTool: 'Cobertura'
#    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'